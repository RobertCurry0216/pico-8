pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
--main
function _init()
	p=player:new(64,64)
	cam={x=0, y=0}
end

function _update()
	p:update()
end

function _draw()
	cls(1)
	map(cam.x,cam.y,0,0)
	p:draw()
	print("\b2\#1c_x:"..tostring(c_x))
	print("\b2\#1c_g:"..tostring(c_ground))
	print("\b2\#1c_r:"..tostring(c_roof))
end
-->8
--player

player={
	__tostring=function(self)
		return "<player>"
	end
}

function player:new(x,y)
	local p={}
	setmetatable(p,player)
	--constructor
	p.pos=vector:new(x,y)
	p.speed=vector:new()
	p.speed.maxx=1.5
	p.speed.maxy=2
 p.acc=0.08
 p.dcc=0.8
 p.airdcc=1
 p.grav=0.15
	p.boost=3
	
	--sprites
	p.width=8 --pixel width
	p.height=8 --pixel height
	p.anims={
		idle={
			ticks=1,
			frames={1}
		},
		walking={
			ticks=5,
			frames={1,2}
		},
    jumping={
      ticks=1,
      frames={2}
    },
		falling={
			ticks=1,
			frames={2}
		},
    sliding={
      ticks=1,
      frames={1}
    }
	}
	p.state="idle"
	p.curframe=1
	p.animtick=0
	p.flipx=false
	
  --jump controller
  p.jump={
		landed=false,
    is_pressed=false, --pressed this frame
    is_held=false, --held btn down
    ticks_held=0,
    is_released=true,
    min_press=5,
    max_press=15,
    --update
    update=player_jump_update
  }

  p.grounded=false
  p.airtime=0
	
	--methods
	p.draw=player_draw
	p.update=player_update

	function p:set_state(s)
		if s != self.state then self.curframe=1 end
		p.state=s
	end
	
	function p:anim()
		return self.anims[self.state]
	end
	
	function p.speed:update(dx,dy)
		self.x+=dx
		self.y+=dy
		self.x=mid(-self.maxx,self.x,self.maxx)
	end

	--end class
	return p
end

function player_draw(self)
	local a=self:anim()
	spr(a.frames[self.curframe],
	self.pos.x,
	self.pos.y,
	self.width/8,
	self.height/8,
	self.flipx,
	false)
end

function player_update(self)
	local bl=btn(⬅️)
	local br=btn(➡️)
	local bu=btn(⬆️)
	local bd=btn(⬇️)
	
	--calc movement
	local dx=0
	dx -= bl and 1 or 0
	dx += br and 1 or 0
	dx*=self.acc
	local dy=self.jump.landed and 0 or self.grav


	--calc collusion
	c_x = collide_map(self.pos,self.width,self.height,1,dx,0)
	c_ground = collide_map(self.pos,self.width,self.height,1,0,1)
	c_roof = collide_map(self.pos,self.width,self.height,1,0,-1)

	if c_ground then
		self.jump.landed=true
	elseif dy>0 then --raising
		if c_roof then 
			dy=0
			self.speed.y=0
		end
	elseif dy<0 then
		if c_ground then
			dy=0
			self.speed.y=0
			self.jump.landed=true
		end
	end
	if c_x then
		self.speed.x=0
		dx=0
	end
	
	--update pos
	self.speed:update(dx,dy)
	self.pos+=self.speed

	--dcc
	if not bl and not br then
		self.speed.x*=self.dcc
		if abs(self.speed.x)<0.2 then
			self.speed.x=0
		end
	end
	if c_ground or c_roof then 
		--move out of the ground
		self.pos.y-=((self.pos.y+self.height+1)%8)-1
	end
	if c_x then
		--move out of the wall
		self.pos.x-=((self.pos.x+self.width+1)%8)-1
	end

	--set state
	if self.jump.landed then
		if self.speed.x!= 0 then
			if bl or br then
				self:set_state"walking"
			else
				self:set_state"sliding"
			end
		else
			self:set_state"idle"
		end
	else
		if dy>0 then
			self:set_state"jumping"
		else
			self:set_state"falling"
		end
	end
	
	if dx!=0 then
		self.flipx=dx<0
	end
	
	--update anim
	local a = self:anim()
	self.animtick-=1
	if self.animtick <= 0 then
		self.curframe+=1
		if self.curframe > #a.frames then
			self.curframe=1
		end
		self.animtick=a.ticks
	end
end

function player_jump_update(self, pressed)
  self.is_pressed=false
  if pressed then
    if not self.is_held then
      self.is_pressed=true
    end
    self.is_held=true
    self.ticks_down+=1
  else
    self.is_held=false
    self.ticks_down=0
  end
end
-->8
--util

--constants
inf = 32767

darkenshademap = {
		"0,0,0,0,0,0",
		"1,1,1,0,0,0",
		"2,2,1,1,0,0",
		"3,3,3,1,1,0",
		"4,2,2,1,1,0",
		"5,5,1,1,1,0",
		"6,6,13,5,1,0",
		"7,7,6,13,1,0",
		"8,8,2,2,1,0",
		"9,4,2,2,1,0",
		"10,9,4,2,1,0",
		"11,11,3,3,1,0",
		"12,12,13,5,1,0",
		"13,13,5,1,1,0",
		"14,14,4,2,1,0",
		"15,9,4,2,1,0",
	}

--utils
function round(v)
  return flr(v+0.5)
end

function darken(c,v)
	return tonum(split(darkenshademap[c+1])[v])
end

function join(a,b)
  local t = {}
  for v in all(a) do
    add(t,v)
  end
  for v in all(b) do
    add(t,v)
  end
  return t
end

--collision helpers
function collide_map(pos,w,h,f,dx,dy)
	local x1=pos.x+dx
	local y1=pos.y+dy
	local x2=pos.x+w+dx-1
	local y2=pos.y+h+dy-1

	x1/=8 y1/=8
	x2/=8 y2/=8

	local c_br=fget(mget(x1,y1))
	local c_tr=fget(mget(x1,y2))
	local c_bl=fget(mget(x2,y1))
	local c_tl=fget(mget(x2,y2))

	return (c_bl | c_br | c_tl | c_tr)&f == f
end

-->8
--math

function sign(x)
	return x/abs(x)
end

--vectors
vector = {
  __tostring = function(self)
		return "<"..self.x..":"..self.y..":"..self.z..">"
  end,
  __add = function(self, other)
    local v = vector:new()
    v.x = self.x + other.x
    v.y = self.y + other.y
    v.z = self.z + other.z
    return v
  end,
  __sub = function(self, other)
    local v = vector:new()
    v.x = self.x - other.x
    v.y = self.y - other.y
    v.z = self.z - other.z
    return v
  end,
  __mul = function(self, other)
    local v = vector:new()
    v.x = self.x * other
    v.y = self.y * other
    v.z = self.z * other
    return v
  end,
  __div = function(self, other)
    local v = vector:new()
    v.x = self.x / other
    v.y = self.y / other
    v.z = self.z / other
    return v
  end,
  __len = function(self)
    return sqrt(self.x*self.x + self.y*self.y + self.z*self.z)
  end
}

function vector:new(x, y, z)
  --constructor
  local v = {}
  setmetatable(v, vector)
  v.x = x or 0
  v.y = y or 0
  v.z = z or 0

  --methods
  function v:copy()
    return vector:new(self.x, self.y, self.z)
  end

  function v:dot(other)
	  return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)
  end

  function v:cross(other)
    local v = vector:new()
    v.x = (self.y * other.z) - (self.z * other.y)
    v.y = (self.z * other.x) - (self.x * other.z)
    v.z = (self.x * other.y) - (self.y * other.x)
    return v
  end

  function v:norm()
  	if #self==0 then 
  		return self:copy()
   end
   return self/#self
  end

  return v
end
__gfx__
00000000000000000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000990000099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700009999000099190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000099190000f9990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000f999000f99990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000f999000099999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000009999000900009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000009009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c000000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c0cc660d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c0c0660d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c0c00d0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c0cddd0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c000000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0dddddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000001000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010101010101010101010101010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000010101010101010001010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010001000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000101000000000000000000000001010001000101010101010101000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001000000000000000000000001010001000100000000000001000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010100000000000000000001010001000100000000000001000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010001000100000000000001000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010001000100000000000001000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001010001000100000000000001000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000010101010000010101010001010001000000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000010000000000000000000001010001010101010101010101010100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000010000000000000000000001010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
